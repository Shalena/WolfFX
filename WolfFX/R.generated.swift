//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    
    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 25 images.
  struct image {
    /// Image `arrow left`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow left")
    /// Image `arrow-down`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down")
    /// Image `arrow-right`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right")
    /// Image `balanceExample`.
    static let balanceExample = Rswift.ImageResource(bundle: R.hostingBundle, name: "balanceExample")
    /// Image `billingTab`.
    static let billingTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "billingTab")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `control`.
    static let control = Rswift.ImageResource(bundle: R.hostingBundle, name: "control")
    /// Image `dummyHome`.
    static let dummyHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummyHome")
    /// Image `envelope`.
    static let envelope = Rswift.ImageResource(bundle: R.hostingBundle, name: "envelope")
    /// Image `envelopes`.
    static let envelopes = Rswift.ImageResource(bundle: R.hostingBundle, name: "envelopes")
    /// Image `homeTab`.
    static let homeTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeTab")
    /// Image `inOutHowToTrade`.
    static let inOutHowToTrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "inOutHowToTrade")
    /// Image `krisPortrait`.
    static let krisPortrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "krisPortrait")
    /// Image `left-right`.
    static let leftRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "left-right")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `money`.
    static let money = Rswift.ImageResource(bundle: R.hostingBundle, name: "money")
    /// Image `page3`.
    static let page3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "page3")
    /// Image `redEnvelops`.
    static let redEnvelops = Rswift.ImageResource(bundle: R.hostingBundle, name: "redEnvelops")
    /// Image `selectedCheckBox`.
    static let selectedCheckBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedCheckBox")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `speed-arrow`.
    static let speedArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "speed-arrow")
    /// Image `speedometer`.
    static let speedometer = Rswift.ImageResource(bundle: R.hostingBundle, name: "speedometer")
    /// Image `trade-in`.
    static let tradeIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "trade-in")
    /// Image `unselectedCheckBox`.
    static let unselectedCheckBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedCheckBox")
    /// Image `walletTab`.
    static let walletTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletTab")
    
    /// `UIImage(named: "arrow left", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-down", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow-right", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "balanceExample", bundle: ..., traitCollection: ...)`
    static func balanceExample(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.balanceExample, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "billingTab", bundle: ..., traitCollection: ...)`
    static func billingTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.billingTab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "control", bundle: ..., traitCollection: ...)`
    static func control(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.control, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dummyHome", bundle: ..., traitCollection: ...)`
    static func dummyHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummyHome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "envelope", bundle: ..., traitCollection: ...)`
    static func envelope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.envelope, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "envelopes", bundle: ..., traitCollection: ...)`
    static func envelopes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.envelopes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeTab", bundle: ..., traitCollection: ...)`
    static func homeTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeTab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "inOutHowToTrade", bundle: ..., traitCollection: ...)`
    static func inOutHowToTrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inOutHowToTrade, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "krisPortrait", bundle: ..., traitCollection: ...)`
    static func krisPortrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.krisPortrait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "left-right", bundle: ..., traitCollection: ...)`
    static func leftRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "money", bundle: ..., traitCollection: ...)`
    static func money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "page3", bundle: ..., traitCollection: ...)`
    static func page3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.page3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "redEnvelops", bundle: ..., traitCollection: ...)`
    static func redEnvelops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redEnvelops, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selectedCheckBox", bundle: ..., traitCollection: ...)`
    static func selectedCheckBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedCheckBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speed-arrow", bundle: ..., traitCollection: ...)`
    static func speedArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speedArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speedometer", bundle: ..., traitCollection: ...)`
    static func speedometer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speedometer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trade-in", bundle: ..., traitCollection: ...)`
    static func tradeIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tradeIn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unselectedCheckBox", bundle: ..., traitCollection: ...)`
    static func unselectedCheckBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedCheckBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walletTab", bundle: ..., traitCollection: ...)`
    static func walletTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletTab, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `BalanceHistoryFooterView`.
    static let balanceHistoryFooterView = _R.nib._BalanceHistoryFooterView()
    /// Nib `BaseHeaderView`.
    static let baseHeaderView = _R.nib._BaseHeaderView()
    
    /// `UINib(name: "BalanceHistoryFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.balanceHistoryFooterView) instead")
    static func balanceHistoryFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceHistoryFooterView)
    }
    
    /// `UINib(name: "BaseHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.baseHeaderView) instead")
    static func baseHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.baseHeaderView)
    }
    
    static func balanceHistoryFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.balanceHistoryFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func baseHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.baseHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AssetCell`.
    static let assetCell: Rswift.ReuseIdentifier<AssetCell> = Rswift.ReuseIdentifier(identifier: "AssetCell")
    /// Reuse identifier `BalanceHistoryCell`.
    static let balanceHistoryCell: Rswift.ReuseIdentifier<BalanceHistoryCell> = Rswift.ReuseIdentifier(identifier: "BalanceHistoryCell")
    /// Reuse identifier `LanguageCell`.
    static let languageCell: Rswift.ReuseIdentifier<LanguageCell> = Rswift.ReuseIdentifier(identifier: "LanguageCell")
    /// Reuse identifier `LegalInfoCell`.
    static let legalInfoCell: Rswift.ReuseIdentifier<LegalInfoCell> = Rswift.ReuseIdentifier(identifier: "LegalInfoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `CarouselMainController`, and contains static references to 1 segues.
    struct carouselMainController {
      /// Segue identifier `embedPageSegue`.
      static let embedPageSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CarouselMainController, PageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "embedPageSegue")
      
      /// Optionally returns a typed version of segue `embedPageSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embedPageSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CarouselMainController, PageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.carouselMainController.embedPageSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Billing Data`.
    static let billingData = _R.storyboard.billingData()
    /// Storyboard `Carousel`.
    static let carousel = _R.storyboard.carousel()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Wallet`.
    static let wallet = _R.storyboard.wallet()
    
    /// `UIStoryboard(name: "Billing Data", bundle: ...)`
    static func billingData(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.billingData)
    }
    
    /// `UIStoryboard(name: "Carousel", bundle: ...)`
    static func carousel(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.carousel)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "Wallet", bundle: ...)`
    static func wallet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wallet)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 104 localization keys.
    struct localizable {
      /// en translation: * Bank name
      /// 
      /// Locales: en, zh-Hans
      static let bankName = Rswift.StringResource(key: "Bank name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: * Beneficiary bank account
      /// 
      /// Locales: en, zh-Hans
      static let beneficiaryBankAccount = Rswift.StringResource(key: "Beneficiary bank account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: * Beneficiary name
      /// 
      /// Locales: en, zh-Hans
      static let beneficiaryName = Rswift.StringResource(key: "Beneficiary name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: * Currency
      /// 
      /// Locales: en, zh-Hans
      static let currency = Rswift.StringResource(key: "Currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: * Email
      /// 
      /// Locales: en, zh-Hans
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: * First name
      /// 
      /// Locales: en, zh-Hans
      static let firstName = Rswift.StringResource(key: "First name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: * Password
      /// 
      /// Locales: en, zh-Hans
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 1) Get paid if the price breaks through the top or bottom of the range
      /// 
      /// Locales: en, zh-Hans
      static let getPaid = Rswift.StringResource(key: "Get paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 1) How much you invest. More reward means more risk.
      /// 
      /// Locales: en, zh-Hans
      static let howMuch = Rswift.StringResource(key: "How much", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 2) Get paid again if the price breaks through again.
      /// 
      /// Locales: en, zh-Hans
      static let getPaidAgain = Rswift.StringResource(key: "Get paid again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 2) How many times you want to grow your cash. Big win means big risk.
      /// 
      /// Locales: en, zh-Hans
      static let howMany = Rswift.StringResource(key: "How many", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 3) How fast you want the trade to happen. Expiry times from 30 seconds to 1 hour.
      /// 
      /// Locales: en, zh-Hans
      static let howFast = Rswift.StringResource(key: "How fast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 4) Your asset. Dollar. Gold. Oil. You can invest all of them
      /// 
      /// Locales: en, zh-Hans
      static let yourAsset = Rswift.StringResource(key: "Your asset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: ACCOUNT DATA
      /// 
      /// Locales: en, zh-Hans
      static let billingDataTitle = Rswift.StringResource(key: "Billing data title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: About us
      /// 
      /// Locales: en, zh-Hans
      static let aboutUs = Rswift.StringResource(key: "About us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account data
      /// 
      /// Locales: en, zh-Hans
      static let accountData = Rswift.StringResource(key: "Account data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount (available %@)
      /// 
      /// Locales: en, zh-Hans
      static let amountAvailable = Rswift.StringResource(key: "Amount available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount pending withdrawal
      /// 
      /// Locales: en, zh-Hans
      static let amountPendingWithdrawal = Rswift.StringResource(key: "Amount pending withdrawal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Asset
      /// 
      /// Locales: en, zh-Hans
      static let asset = Rswift.StringResource(key: "Asset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: BET OVER 30 SECONDS UP TO ONE HOUR
      /// 
      /// Locales: en, zh-Hans
      static let firstPageTitle = Rswift.StringResource(key: "First Page title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static let balance = Rswift.StringResource(key: "Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Best Execution Policy
      /// 
      /// Locales: en, zh-Hans
      static let bestExecutionPolicy = Rswift.StringResource(key: "Best Execution Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bonus!
      /// 
      /// Locales: en, zh-Hans
      static let bonus = Rswift.StringResource(key: "Bonus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bonuses
      /// 
      /// Locales: en, zh-Hans
      static let bonuses = Rswift.StringResource(key: "Bonuses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: British pound
      /// 
      /// Locales: en, zh-Hans
      static let britishPound = Rswift.StringResource(key: "British pound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: CONTROL
      /// 
      /// Locales: en, zh-Hans
      static let control = Rswift.StringResource(key: "Control", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cash in. Check your account balance to see how much you made.
      /// 
      /// Locales: en, zh-Hans
      static let cashIn = Rswift.StringResource(key: "Cash in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: China Union Pay
      /// 
      /// Locales: en, zh-Hans
      static let chinaUnionPay = Rswift.StringResource(key: "China Union Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Choose how you make money in 4 ways.
      /// 
      /// Locales: en, zh-Hans
      static let choose = Rswift.StringResource(key: "Choose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Click here to accept our client agreement
      /// 
      /// Locales: en, zh-Hans
      static let clickHereToAcceptOurClientAgreement = Rswift.StringResource(key: "Click here to accept our client agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Client Agreement
      /// 
      /// Locales: en, zh-Hans
      static let clientAgreement = Rswift.StringResource(key: "Client Agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Commodities
      /// 
      /// Locales: en, zh-Hans
      static let commodities = Rswift.StringResource(key: "Commodities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm password
      /// 
      /// Locales: en, zh-Hans
      static let confirmPassword = Rswift.StringResource(key: "Confirm password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en, zh-Hans
      static let `continue` = Rswift.StringResource(key: "Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create your account
      /// 
      /// Locales: en, zh-Hans
      static let createYourAccount = Rswift.StringResource(key: "Create your account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Currencies
      /// 
      /// Locales: en, zh-Hans
      static let currencies = Rswift.StringResource(key: "Currencies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Date from
      /// 
      /// Locales: en, zh-Hans
      static let dateFrom = Rswift.StringResource(key: "Date from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Date to
      /// 
      /// Locales: en, zh-Hans
      static let dateTo = Rswift.StringResource(key: "Date to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit
      /// 
      /// Locales: en, zh-Hans
      static let deposit = Rswift.StringResource(key: "Deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deposit $10 or more
      /// 
      /// Locales: en, zh-Hans
      static let deposit10OrMore = Rswift.StringResource(key: "Deposit $10 or more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Email
      /// 
      /// Locales: en, zh-Hans
      static let emailOnLogin = Rswift.StringResource(key: "EmailOnLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter amount
      /// 
      /// Locales: en, zh-Hans
      static let enterAmount = Rswift.StringResource(key: "Enter amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Euro
      /// 
      /// Locales: en, zh-Hans
      static let euro = Rswift.StringResource(key: "Euro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Expiry time
      /// 
      /// Locales: en, zh-Hans
      static let expiryTime = Rswift.StringResource(key: "Expiry time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Free money
      /// 
      /// Locales: en, zh-Hans
      static let freeMoney = Rswift.StringResource(key: "Free money", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Get a 100% bonus
      /// 
      /// Locales: en, zh-Hans
      static let getA100Bonus = Rswift.StringResource(key: "Get a 100% bonus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Hit IN TRADE if you want to be in the range at the expiry time.
      /// 
      /// Locales: en, zh-Hans
      static let hitINTRADE = Rswift.StringResource(key: "Hit IN TRADE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, zh-Hans
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: How to do it
      /// 
      /// Locales: en, zh-Hans
      static let howToDoIt = Rswift.StringResource(key: "How to do it", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: How to trade
      /// 
      /// Locales: en, zh-Hans
      static let howToTrade = Rswift.StringResource(key: "How to trade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: IN TRADE means between the top and bottom value at the expiry time
      /// 
      /// Locales: en, zh-Hans
      static let inTradeExplaination = Rswift.StringResource(key: "in trade explaination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: If we see you deposit, we will double your money
      /// 
      /// Locales: en, zh-Hans
      static let ifWeSee = Rswift.StringResource(key: "If we see", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: In trade
      /// 
      /// Locales: en, zh-Hans
      static let inTrade = Rswift.StringResource(key: "In trade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Indices
      /// 
      /// Locales: en, zh-Hans
      static let indices = Rswift.StringResource(key: "Indices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Investment
      /// 
      /// Locales: en, zh-Hans
      static let investment = Rswift.StringResource(key: "Investment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: LET'S START WITH THE PRICE
      /// 
      /// Locales: en, zh-Hans
      static let startwithpricE = Rswift.StringResource(key: "START WITH PRICE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Legal Information
      /// 
      /// Locales: en, zh-Hans
      static let legalInformation = Rswift.StringResource(key: "Legal Information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Let's go
      /// 
      /// Locales: en, zh-Hans
      static let letSGo = Rswift.StringResource(key: "Let's go", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Leverage
      /// 
      /// Locales: en, zh-Hans
      static let leverage = Rswift.StringResource(key: "Leverage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Log in
      /// 
      /// Locales: en, zh-Hans
      static let logIn = Rswift.StringResource(key: "Log in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: MAKE MONEY IN TWO WAYS,
      /// 
      /// Locales: en, zh-Hans
      static let makemoneY = Rswift.StringResource(key: "MAKE MONEY", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: MAKE OVER 10 TIMES YOUR MONEY
      /// 
      /// Locales: en, zh-Hans
      static let firstPageSubtitle = Rswift.StringResource(key: "First Page subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My wallet
      /// 
      /// Locales: en, zh-Hans
      static let myWallet = Rswift.StringResource(key: "My wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Now the trade is live - win red envelopes and win with your trade.
      /// 
      /// Locales: en, zh-Hans
      static let nowTheTradeIsLive = Rswift.StringResource(key: "Now the trade is live", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static let passwordOnLogin = Rswift.StringResource(key: "PasswordOnLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please confirm your payment method from the list below
      /// 
      /// Locales: en, zh-Hans
      static let pleaseConfirmYourPaymentMethodFromTheListBelow = Rswift.StringResource(key: "Please confirm your payment method from the list below", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Predict the price at the end. Bet the price will be in a range, or outside. Only the price at the end matters for your investment.
      /// 
      /// Locales: en, zh-Hans
      static let predictThePrice = Rswift.StringResource(key: "Predict the price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, zh-Hans
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Profile
      /// 
      /// Locales: en, zh-Hans
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Profile data
      /// 
      /// Locales: en, zh-Hans
      static let profileData = Rswift.StringResource(key: "Profile data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: RMB to be paid
      /// 
      /// Locales: en, zh-Hans
      static let rmbToBePaid = Rswift.StringResource(key: "RMB to be paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Real balance
      /// 
      /// Locales: en, zh-Hans
      static let realBalance = Rswift.StringResource(key: "Real balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Real money
      /// 
      /// Locales: en, zh-Hans
      static let realMoney = Rswift.StringResource(key: "Real money", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Request for money withdrawal
      /// 
      /// Locales: en, zh-Hans
      static let requestForMoneyWithdrawal = Rswift.StringResource(key: "Request for money withdrawal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Request withdrawal
      /// 
      /// Locales: en, zh-Hans
      static let requestWithdrawal = Rswift.StringResource(key: "Request withdrawal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Restore password
      /// 
      /// Locales: en, zh-Hans
      static let restorePassword = Rswift.StringResource(key: "Restore password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Risk disclosure notice
      /// 
      /// Locales: en, zh-Hans
      static let riskDisclosureNotice = Rswift.StringResource(key: "Risk disclosure notice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, zh-Hans
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sentiments
      /// 
      /// Locales: en, zh-Hans
      static let sentiments = Rswift.StringResource(key: "Sentiments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sign in
      /// 
      /// Locales: en, zh-Hans
      static let signIn = Rswift.StringResource(key: "Sign in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sign out
      /// 
      /// Locales: en, zh-Hans
      static let signOut = Rswift.StringResource(key: "Sign out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sign up
      /// 
      /// Locales: en, zh-Hans
      static let signUp = Rswift.StringResource(key: "Sign up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sunbeam Capital LLC is an International financial Entity (IFE) which is licensedand regulated by the Office of the Commissioner of Financial Institutions pursuant to Act No. 273 of September 25, 2012, as amended (the IFE Act) and Regulation No.5653.
      /// 
      /// Locales: en, zh-Hans
      static let sunbeamCapitalIs = Rswift.StringResource(key: "Sunbeam Capital is", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support
      /// 
      /// Locales: en, zh-Hans
      static let support = Rswift.StringResource(key: "Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Terms and conditions
      /// 
      /// Locales: en, zh-Hans
      static let termsAndConditions = Rswift.StringResource(key: "Terms and conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Terms and conditions apply (please ask for details)
      /// 
      /// Locales: en, zh-Hans
      static let termsAndConditionsApply = Rswift.StringResource(key: "Terms and conditions apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Trade copying terms and conditions
      /// 
      /// Locales: en, zh-Hans
      static let tradeCopyingTermsAndConditions = Rswift.StringResource(key: "Trade copying terms and conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: United states pound
      /// 
      /// Locales: en
      static let unitedStatesPound = Rswift.StringResource(key: "United states pound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Up to $500
      /// 
      /// Locales: en, zh-Hans
      static let upTo500 = Rswift.StringResource(key: "Up to $500", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: WELL PLAYED - good luck with your next trade!
      /// 
      /// Locales: en, zh-Hans
      static let wellPlayed = Rswift.StringResource(key: "Well played", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: We are Sunbeam Capital LLC of Puerto Rico, USA
      /// 
      /// Locales: en, zh-Hans
      static let weAreSunbeam = Rswift.StringResource(key: "We are sunbeam", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: We use technology licensed from Cuboid Logic Ltd, Guernsey, UK.
      /// 
      /// Locales: en, zh-Hans
      static let weUseTechnology = Rswift.StringResource(key: "We use technology", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdraw
      /// 
      /// Locales: en, zh-Hans
      static let withdraw = Rswift.StringResource(key: "Withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal to
      /// 
      /// Locales: en, zh-Hans
      static let withdrawalTo = Rswift.StringResource(key: "Withdrawal to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your funds are held in segregated bank accounts with $1,000,000 client fund insurance.
      /// 
      /// Locales: en, zh-Hans
      static let yourFunds = Rswift.StringResource(key: "Your funds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your winning are the sum of predicting the price and the red envelopes.
      /// 
      /// Locales: en, zh-Hans
      static let yourWinnings = Rswift.StringResource(key: "Your winnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your winnings are the sum of predicting the price and the red envelopes.
      /// 
      /// Locales: en, zh-Hans
      static let yourWinningsAreTheSum = Rswift.StringResource(key: "Your winnings are the sum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: how?
      /// 
      /// Locales: en, zh-Hans
      static let how = Rswift.StringResource(key: "how?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: or
      /// 
      /// Locales: en, zh-Hans
      static let or = Rswift.StringResource(key: "or", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: with red envelopes
      /// 
      /// Locales: en, zh-Hans
      static let withRedEnvelops = Rswift.StringResource(key: "with red envelops", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// zh-Hans translation: 
      /// 
      /// Locales: zh-Hans
      static let unitedStatesDollar = Rswift.StringResource(key: "United states dollar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// en translation: * Bank name
      /// 
      /// Locales: en, zh-Hans
      static func bankName(_: Void = ()) -> String {
        return NSLocalizedString("Bank name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: * Beneficiary bank account
      /// 
      /// Locales: en, zh-Hans
      static func beneficiaryBankAccount(_: Void = ()) -> String {
        return NSLocalizedString("Beneficiary bank account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: * Beneficiary name
      /// 
      /// Locales: en, zh-Hans
      static func beneficiaryName(_: Void = ()) -> String {
        return NSLocalizedString("Beneficiary name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: * Currency
      /// 
      /// Locales: en, zh-Hans
      static func currency(_: Void = ()) -> String {
        return NSLocalizedString("Currency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: * Email
      /// 
      /// Locales: en, zh-Hans
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("Email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: * First name
      /// 
      /// Locales: en, zh-Hans
      static func firstName(_: Void = ()) -> String {
        return NSLocalizedString("First name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: * Password
      /// 
      /// Locales: en, zh-Hans
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1) Get paid if the price breaks through the top or bottom of the range
      /// 
      /// Locales: en, zh-Hans
      static func getPaid(_: Void = ()) -> String {
        return NSLocalizedString("Get paid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1) How much you invest. More reward means more risk.
      /// 
      /// Locales: en, zh-Hans
      static func howMuch(_: Void = ()) -> String {
        return NSLocalizedString("How much", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2) Get paid again if the price breaks through again.
      /// 
      /// Locales: en, zh-Hans
      static func getPaidAgain(_: Void = ()) -> String {
        return NSLocalizedString("Get paid again", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2) How many times you want to grow your cash. Big win means big risk.
      /// 
      /// Locales: en, zh-Hans
      static func howMany(_: Void = ()) -> String {
        return NSLocalizedString("How many", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3) How fast you want the trade to happen. Expiry times from 30 seconds to 1 hour.
      /// 
      /// Locales: en, zh-Hans
      static func howFast(_: Void = ()) -> String {
        return NSLocalizedString("How fast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 4) Your asset. Dollar. Gold. Oil. You can invest all of them
      /// 
      /// Locales: en, zh-Hans
      static func yourAsset(_: Void = ()) -> String {
        return NSLocalizedString("Your asset", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ACCOUNT DATA
      /// 
      /// Locales: en, zh-Hans
      static func billingDataTitle(_: Void = ()) -> String {
        return NSLocalizedString("Billing data title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About us
      /// 
      /// Locales: en, zh-Hans
      static func aboutUs(_: Void = ()) -> String {
        return NSLocalizedString("About us", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account data
      /// 
      /// Locales: en, zh-Hans
      static func accountData(_: Void = ()) -> String {
        return NSLocalizedString("Account data", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount (available %@)
      /// 
      /// Locales: en, zh-Hans
      static func amountAvailable(_ value1: String) -> String {
        return String(format: NSLocalizedString("Amount available", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Amount pending withdrawal
      /// 
      /// Locales: en, zh-Hans
      static func amountPendingWithdrawal(_: Void = ()) -> String {
        return NSLocalizedString("Amount pending withdrawal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Asset
      /// 
      /// Locales: en, zh-Hans
      static func asset(_: Void = ()) -> String {
        return NSLocalizedString("Asset", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BET OVER 30 SECONDS UP TO ONE HOUR
      /// 
      /// Locales: en, zh-Hans
      static func firstPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("First Page title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static func balance(_: Void = ()) -> String {
        return NSLocalizedString("Balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Best Execution Policy
      /// 
      /// Locales: en, zh-Hans
      static func bestExecutionPolicy(_: Void = ()) -> String {
        return NSLocalizedString("Best Execution Policy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bonus!
      /// 
      /// Locales: en, zh-Hans
      static func bonus(_: Void = ()) -> String {
        return NSLocalizedString("Bonus", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bonuses
      /// 
      /// Locales: en, zh-Hans
      static func bonuses(_: Void = ()) -> String {
        return NSLocalizedString("Bonuses", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: British pound
      /// 
      /// Locales: en, zh-Hans
      static func britishPound(_: Void = ()) -> String {
        return NSLocalizedString("British pound", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CONTROL
      /// 
      /// Locales: en, zh-Hans
      static func control(_: Void = ()) -> String {
        return NSLocalizedString("Control", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cash in. Check your account balance to see how much you made.
      /// 
      /// Locales: en, zh-Hans
      static func cashIn(_: Void = ()) -> String {
        return NSLocalizedString("Cash in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: China Union Pay
      /// 
      /// Locales: en, zh-Hans
      static func chinaUnionPay(_: Void = ()) -> String {
        return NSLocalizedString("China Union Pay", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Choose how you make money in 4 ways.
      /// 
      /// Locales: en, zh-Hans
      static func choose(_: Void = ()) -> String {
        return NSLocalizedString("Choose", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click here to accept our client agreement
      /// 
      /// Locales: en, zh-Hans
      static func clickHereToAcceptOurClientAgreement(_: Void = ()) -> String {
        return NSLocalizedString("Click here to accept our client agreement", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Client Agreement
      /// 
      /// Locales: en, zh-Hans
      static func clientAgreement(_: Void = ()) -> String {
        return NSLocalizedString("Client Agreement", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Commodities
      /// 
      /// Locales: en, zh-Hans
      static func commodities(_: Void = ()) -> String {
        return NSLocalizedString("Commodities", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm password
      /// 
      /// Locales: en, zh-Hans
      static func confirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("Confirm password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en, zh-Hans
      static func `continue`(_: Void = ()) -> String {
        return NSLocalizedString("Continue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create your account
      /// 
      /// Locales: en, zh-Hans
      static func createYourAccount(_: Void = ()) -> String {
        return NSLocalizedString("Create your account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currencies
      /// 
      /// Locales: en, zh-Hans
      static func currencies(_: Void = ()) -> String {
        return NSLocalizedString("Currencies", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Date from
      /// 
      /// Locales: en, zh-Hans
      static func dateFrom(_: Void = ()) -> String {
        return NSLocalizedString("Date from", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Date to
      /// 
      /// Locales: en, zh-Hans
      static func dateTo(_: Void = ()) -> String {
        return NSLocalizedString("Date to", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit
      /// 
      /// Locales: en, zh-Hans
      static func deposit(_: Void = ()) -> String {
        return NSLocalizedString("Deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deposit $10 or more
      /// 
      /// Locales: en, zh-Hans
      static func deposit10OrMore(_: Void = ()) -> String {
        return NSLocalizedString("Deposit $10 or more", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en, zh-Hans
      static func emailOnLogin(_: Void = ()) -> String {
        return NSLocalizedString("EmailOnLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter amount
      /// 
      /// Locales: en, zh-Hans
      static func enterAmount(_: Void = ()) -> String {
        return NSLocalizedString("Enter amount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Euro
      /// 
      /// Locales: en, zh-Hans
      static func euro(_: Void = ()) -> String {
        return NSLocalizedString("Euro", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Expiry time
      /// 
      /// Locales: en, zh-Hans
      static func expiryTime(_: Void = ()) -> String {
        return NSLocalizedString("Expiry time", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Free money
      /// 
      /// Locales: en, zh-Hans
      static func freeMoney(_: Void = ()) -> String {
        return NSLocalizedString("Free money", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get a 100% bonus
      /// 
      /// Locales: en, zh-Hans
      static func getA100Bonus(_: Void = ()) -> String {
        return NSLocalizedString("Get a 100% bonus", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hit IN TRADE if you want to be in the range at the expiry time.
      /// 
      /// Locales: en, zh-Hans
      static func hitINTRADE(_: Void = ()) -> String {
        return NSLocalizedString("Hit IN TRADE", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, zh-Hans
      static func home(_: Void = ()) -> String {
        return NSLocalizedString("Home", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How to do it
      /// 
      /// Locales: en, zh-Hans
      static func howToDoIt(_: Void = ()) -> String {
        return NSLocalizedString("How to do it", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How to trade
      /// 
      /// Locales: en, zh-Hans
      static func howToTrade(_: Void = ()) -> String {
        return NSLocalizedString("How to trade", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: IN TRADE means between the top and bottom value at the expiry time
      /// 
      /// Locales: en, zh-Hans
      static func inTradeExplaination(_: Void = ()) -> String {
        return NSLocalizedString("in trade explaination", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If we see you deposit, we will double your money
      /// 
      /// Locales: en, zh-Hans
      static func ifWeSee(_: Void = ()) -> String {
        return NSLocalizedString("If we see", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In trade
      /// 
      /// Locales: en, zh-Hans
      static func inTrade(_: Void = ()) -> String {
        return NSLocalizedString("In trade", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Indices
      /// 
      /// Locales: en, zh-Hans
      static func indices(_: Void = ()) -> String {
        return NSLocalizedString("Indices", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Investment
      /// 
      /// Locales: en, zh-Hans
      static func investment(_: Void = ()) -> String {
        return NSLocalizedString("Investment", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LET'S START WITH THE PRICE
      /// 
      /// Locales: en, zh-Hans
      static func startwithpricE(_: Void = ()) -> String {
        return NSLocalizedString("START WITH PRICE", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static func language(_: Void = ()) -> String {
        return NSLocalizedString("Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Legal Information
      /// 
      /// Locales: en, zh-Hans
      static func legalInformation(_: Void = ()) -> String {
        return NSLocalizedString("Legal Information", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Let's go
      /// 
      /// Locales: en, zh-Hans
      static func letSGo(_: Void = ()) -> String {
        return NSLocalizedString("Let's go", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Leverage
      /// 
      /// Locales: en, zh-Hans
      static func leverage(_: Void = ()) -> String {
        return NSLocalizedString("Leverage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log in
      /// 
      /// Locales: en, zh-Hans
      static func logIn(_: Void = ()) -> String {
        return NSLocalizedString("Log in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MAKE MONEY IN TWO WAYS,
      /// 
      /// Locales: en, zh-Hans
      static func makemoneY(_: Void = ()) -> String {
        return NSLocalizedString("MAKE MONEY", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MAKE OVER 10 TIMES YOUR MONEY
      /// 
      /// Locales: en, zh-Hans
      static func firstPageSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("First Page subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My wallet
      /// 
      /// Locales: en, zh-Hans
      static func myWallet(_: Void = ()) -> String {
        return NSLocalizedString("My wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Now the trade is live - win red envelopes and win with your trade.
      /// 
      /// Locales: en, zh-Hans
      static func nowTheTradeIsLive(_: Void = ()) -> String {
        return NSLocalizedString("Now the trade is live", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static func passwordOnLogin(_: Void = ()) -> String {
        return NSLocalizedString("PasswordOnLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please confirm your payment method from the list below
      /// 
      /// Locales: en, zh-Hans
      static func pleaseConfirmYourPaymentMethodFromTheListBelow(_: Void = ()) -> String {
        return NSLocalizedString("Please confirm your payment method from the list below", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Predict the price at the end. Bet the price will be in a range, or outside. Only the price at the end matters for your investment.
      /// 
      /// Locales: en, zh-Hans
      static func predictThePrice(_: Void = ()) -> String {
        return NSLocalizedString("Predict the price", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, zh-Hans
      static func privacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("Privacy Policy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile
      /// 
      /// Locales: en, zh-Hans
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("Profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile data
      /// 
      /// Locales: en, zh-Hans
      static func profileData(_: Void = ()) -> String {
        return NSLocalizedString("Profile data", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: RMB to be paid
      /// 
      /// Locales: en, zh-Hans
      static func rmbToBePaid(_: Void = ()) -> String {
        return NSLocalizedString("RMB to be paid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Real balance
      /// 
      /// Locales: en, zh-Hans
      static func realBalance(_: Void = ()) -> String {
        return NSLocalizedString("Real balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Real money
      /// 
      /// Locales: en, zh-Hans
      static func realMoney(_: Void = ()) -> String {
        return NSLocalizedString("Real money", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Request for money withdrawal
      /// 
      /// Locales: en, zh-Hans
      static func requestForMoneyWithdrawal(_: Void = ()) -> String {
        return NSLocalizedString("Request for money withdrawal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Request withdrawal
      /// 
      /// Locales: en, zh-Hans
      static func requestWithdrawal(_: Void = ()) -> String {
        return NSLocalizedString("Request withdrawal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore password
      /// 
      /// Locales: en, zh-Hans
      static func restorePassword(_: Void = ()) -> String {
        return NSLocalizedString("Restore password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Risk disclosure notice
      /// 
      /// Locales: en, zh-Hans
      static func riskDisclosureNotice(_: Void = ()) -> String {
        return NSLocalizedString("Risk disclosure notice", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, zh-Hans
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("Save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sentiments
      /// 
      /// Locales: en, zh-Hans
      static func sentiments(_: Void = ()) -> String {
        return NSLocalizedString("Sentiments", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign in
      /// 
      /// Locales: en, zh-Hans
      static func signIn(_: Void = ()) -> String {
        return NSLocalizedString("Sign in", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign out
      /// 
      /// Locales: en, zh-Hans
      static func signOut(_: Void = ()) -> String {
        return NSLocalizedString("Sign out", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign up
      /// 
      /// Locales: en, zh-Hans
      static func signUp(_: Void = ()) -> String {
        return NSLocalizedString("Sign up", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sunbeam Capital LLC is an International financial Entity (IFE) which is licensedand regulated by the Office of the Commissioner of Financial Institutions pursuant to Act No. 273 of September 25, 2012, as amended (the IFE Act) and Regulation No.5653.
      /// 
      /// Locales: en, zh-Hans
      static func sunbeamCapitalIs(_: Void = ()) -> String {
        return NSLocalizedString("Sunbeam Capital is", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support
      /// 
      /// Locales: en, zh-Hans
      static func support(_: Void = ()) -> String {
        return NSLocalizedString("Support", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms and conditions
      /// 
      /// Locales: en, zh-Hans
      static func termsAndConditions(_: Void = ()) -> String {
        return NSLocalizedString("Terms and conditions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms and conditions apply (please ask for details)
      /// 
      /// Locales: en, zh-Hans
      static func termsAndConditionsApply(_: Void = ()) -> String {
        return NSLocalizedString("Terms and conditions apply", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trade copying terms and conditions
      /// 
      /// Locales: en, zh-Hans
      static func tradeCopyingTermsAndConditions(_: Void = ()) -> String {
        return NSLocalizedString("Trade copying terms and conditions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: United states pound
      /// 
      /// Locales: en
      static func unitedStatesPound(_: Void = ()) -> String {
        return NSLocalizedString("United states pound", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Up to $500
      /// 
      /// Locales: en, zh-Hans
      static func upTo500(_: Void = ()) -> String {
        return NSLocalizedString("Up to $500", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WELL PLAYED - good luck with your next trade!
      /// 
      /// Locales: en, zh-Hans
      static func wellPlayed(_: Void = ()) -> String {
        return NSLocalizedString("Well played", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func wallet(_: Void = ()) -> String {
        return NSLocalizedString("Wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We are Sunbeam Capital LLC of Puerto Rico, USA
      /// 
      /// Locales: en, zh-Hans
      static func weAreSunbeam(_: Void = ()) -> String {
        return NSLocalizedString("We are sunbeam", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We use technology licensed from Cuboid Logic Ltd, Guernsey, UK.
      /// 
      /// Locales: en, zh-Hans
      static func weUseTechnology(_: Void = ()) -> String {
        return NSLocalizedString("We use technology", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdraw
      /// 
      /// Locales: en, zh-Hans
      static func withdraw(_: Void = ()) -> String {
        return NSLocalizedString("Withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal to
      /// 
      /// Locales: en, zh-Hans
      static func withdrawalTo(_: Void = ()) -> String {
        return NSLocalizedString("Withdrawal to", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your funds are held in segregated bank accounts with $1,000,000 client fund insurance.
      /// 
      /// Locales: en, zh-Hans
      static func yourFunds(_: Void = ()) -> String {
        return NSLocalizedString("Your funds", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your winning are the sum of predicting the price and the red envelopes.
      /// 
      /// Locales: en, zh-Hans
      static func yourWinnings(_: Void = ()) -> String {
        return NSLocalizedString("Your winnings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your winnings are the sum of predicting the price and the red envelopes.
      /// 
      /// Locales: en, zh-Hans
      static func yourWinningsAreTheSum(_: Void = ()) -> String {
        return NSLocalizedString("Your winnings are the sum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: how?
      /// 
      /// Locales: en, zh-Hans
      static func how(_: Void = ()) -> String {
        return NSLocalizedString("how?", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: or
      /// 
      /// Locales: en, zh-Hans
      static func or(_: Void = ()) -> String {
        return NSLocalizedString("or", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: with red envelopes
      /// 
      /// Locales: en, zh-Hans
      static func withRedEnvelops(_: Void = ()) -> String {
        return NSLocalizedString("with red envelops", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 
      /// 
      /// Locales: zh-Hans
      static func unitedStatesDollar(_: Void = ()) -> String {
        return NSLocalizedString("United states dollar", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BaseHeaderView.validate()
    }
    
    struct _BalanceHistoryFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BalanceHistoryFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _BaseHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BaseHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "envelope", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'envelope' is used in nib 'BaseHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speed-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speed-arrow' is used in nib 'BaseHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try billingData.validate()
      try carousel.validate()
      try home.validate()
      try launchScreen.validate()
      try login.validate()
      try settings.validate()
      try wallet.validate()
    }
    
    struct billingData: Rswift.StoryboardResourceType, Rswift.Validatable {
      let billingDataViewController = StoryboardViewControllerResource<BillingDataViewController>(identifier: "BillingDataViewController")
      let bundle = R.hostingBundle
      let name = "Billing Data"
      
      func billingDataViewController(_: Void = ()) -> BillingDataViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: billingDataViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.billingData().billingDataViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'billingDataViewController' could not be loaded from storyboard 'Billing Data' as 'BillingDataViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct carousel: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CarouselMainController
      
      let bundle = R.hostingBundle
      let carouselMainController = StoryboardViewControllerResource<CarouselMainController>(identifier: "CarouselMainController")
      let fifthPageController = StoryboardViewControllerResource<FifthPageController>(identifier: "FifthPageController")
      let firstPageController = StoryboardViewControllerResource<FirstPageController>(identifier: "FirstPageController")
      let fourthPageController = StoryboardViewControllerResource<FourthPageController>(identifier: "FourthPageController")
      let name = "Carousel"
      let pageViewController = StoryboardViewControllerResource<PageViewController>(identifier: "PageViewController")
      let secondPageController = StoryboardViewControllerResource<WolfFX.SecondPageController>(identifier: "SecondPageController")
      let seventhPageController = StoryboardViewControllerResource<SeventhPageController>(identifier: "SeventhPageController")
      let sixthPageController = StoryboardViewControllerResource<SixthPageController>(identifier: "SixthPageController")
      let thirdPageController = StoryboardViewControllerResource<ThirdPageController>(identifier: "ThirdPageController")
      
      func carouselMainController(_: Void = ()) -> CarouselMainController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: carouselMainController)
      }
      
      func fifthPageController(_: Void = ()) -> FifthPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fifthPageController)
      }
      
      func firstPageController(_: Void = ()) -> FirstPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: firstPageController)
      }
      
      func fourthPageController(_: Void = ()) -> FourthPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fourthPageController)
      }
      
      func pageViewController(_: Void = ()) -> PageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageViewController)
      }
      
      func secondPageController(_: Void = ()) -> WolfFX.SecondPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: secondPageController)
      }
      
      func seventhPageController(_: Void = ()) -> SeventhPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: seventhPageController)
      }
      
      func sixthPageController(_: Void = ()) -> SixthPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sixthPageController)
      }
      
      func thirdPageController(_: Void = ()) -> ThirdPageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: thirdPageController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "balanceExample", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'balanceExample' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "control", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'control' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "envelopes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'envelopes' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "inOutHowToTrade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'inOutHowToTrade' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "krisPortrait", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'krisPortrait' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "money", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'money' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "page3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'page3' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "redEnvelops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'redEnvelops' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trade-in", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trade-in' is used in storyboard 'Carousel', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.carousel().carouselMainController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'carouselMainController' could not be loaded from storyboard 'Carousel' as 'CarouselMainController'.") }
        if _R.storyboard.carousel().fifthPageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fifthPageController' could not be loaded from storyboard 'Carousel' as 'FifthPageController'.") }
        if _R.storyboard.carousel().firstPageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'firstPageController' could not be loaded from storyboard 'Carousel' as 'FirstPageController'.") }
        if _R.storyboard.carousel().fourthPageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fourthPageController' could not be loaded from storyboard 'Carousel' as 'FourthPageController'.") }
        if _R.storyboard.carousel().pageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageViewController' could not be loaded from storyboard 'Carousel' as 'PageViewController'.") }
        if _R.storyboard.carousel().secondPageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'secondPageController' could not be loaded from storyboard 'Carousel' as 'WolfFX.SecondPageController'.") }
        if _R.storyboard.carousel().seventhPageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'seventhPageController' could not be loaded from storyboard 'Carousel' as 'SeventhPageController'.") }
        if _R.storyboard.carousel().sixthPageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sixthPageController' could not be loaded from storyboard 'Carousel' as 'SixthPageController'.") }
        if _R.storyboard.carousel().thirdPageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'thirdPageController' could not be loaded from storyboard 'Carousel' as 'ThirdPageController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Home"
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      let signupViewController = StoryboardViewControllerResource<SignupViewController>(identifier: "SignupViewController")
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func signupViewController(_: Void = ()) -> SignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
        if _R.storyboard.login().signupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupViewController' could not be loaded from storyboard 'Login' as 'SignupViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      let profileDetailsViewController = StoryboardViewControllerResource<ProfileDetailsViewController>(identifier: "ProfileDetailsViewController")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      
      func profileDetailsViewController(_: Void = ()) -> ProfileDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileDetailsViewController)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrow-right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-right' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.settings().profileDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileDetailsViewController' could not be loaded from storyboard 'Settings' as 'ProfileDetailsViewController'.") }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct wallet: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Wallet"
      let walletViewController = StoryboardViewControllerResource<WalletViewController>(identifier: "WalletViewController")
      
      func walletViewController(_: Void = ()) -> WalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.wallet().walletViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletViewController' could not be loaded from storyboard 'Wallet' as 'WalletViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
